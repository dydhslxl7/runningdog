<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="protectMapper">

	<resultMap type="Protect" id="resultProtect">
		<result column="prono" property="prono" />
		<result column="proname" property="proname" />
		<result column="protel" property="protel" />
		<result column="proorgnm" property="proorgnm" />
		<result column="protype" property="protype" />
		<result column="proaddressnew" property="proaddressnew" />
		<result column="proaddressold" property="proaddressold" />
		<result column="prowstime" property="prowstime"/>
		<result column="prowetime" property="prowetime" />
		
	</resultMap>
	
	<!-- 비교연산자를 쿼리문에 그냥 사용하면 태그 엘리먼트 '< , >, &' 과 혼동하는 문제가 발생할 수 있다. -->
	<!-- 이 문제를 미연에 방지하기 위해 xml 코드 중 xml parser에 의해 해석하지 말고, 문장 그대로 해석하라는 뜻으로  
	       <![CDATA[ 쿼리문장 ]]> 사용함-->
	
 	<select id="selectListCountPro" parameterType="Protect" resultType="_int">
	select count(*)
	from protect
	where 1=1
	<if test="searchFiled != null and searchFiled !=''">
		AND ${searchFiled} LIKE  '%' || #{searchValue} || '%'
	</if>
			
	</select>
	<select id="selectListP" parameterType="Protect" resultType="Protect">
			 
			select * from (select rownum rnum, prono, proname, protel, proorgnm, protype, proaddressnew, proaddressold, 
											prowstime, prowetime 
								 from(select *  from  protect 
								<if test="searchFiled != null and searchFiled !=''">
									where ${searchFiled} LIKE  '%' || #{searchValue} || '%'
								</if>
								  order by proname asc)) 
			WHERE RNUM BETWEEN #{startRowNo} AND #{endRowNo}
	</select>
	<select id="selectProtect"  parameterType="_int"  resultMap="resultProtect">
			select * from protect where prono = #{ prono }
	</select>
	<select id="selectProtectPre" parameterType="Protect" resultType="_int">
			select NVL(min(prono), ${ prono })
			from protect
			where 1=1
			<if test="searchFiled != null and searchFiled !=''">
				AND ${searchFiled} LIKE  '%' || #{searchValue} || '%'
			</if>
			<![CDATA[ and prono > #{ prono } ]]>
	</select>
	<select id="selecProtectNext" parameterType="Protect" resultType="_int">
			select NVL(max(prono), ${ prono })
			from protect
			where 1=1
			<if test="searchFiled != null and searchFiled !=''">
				AND ${searchFiled} LIKE  '%' || #{searchValue} || '%'
			</if>
			<![CDATA[ and prono < #{ prono }]]>
	</select>
	<insert id="insertProtect" parameterType="Protect">
			insert into protect 
			values (protect_seq.nextval, #{proname}, #{protel}, #{proorgnm}, #{protype}, #{proaddressnew} , #{proaddressold}, 09, 18 )			    
	</insert>
	<delete id="deleteProtect" parameterType="Protect">
			delete from protect
	</delete>
</mapper>